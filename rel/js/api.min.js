function handle(t,o,e,n){void 0===n&&(n=!1);var r=$(t);r.off(o),r.on(o,e)}function getBlob(t,o){var e=new XMLHttpRequest;e.open("GET",t,!0),e.responseType="blob",e.onload=function(){var t=window.URL.createObjectURL(this.response);o(t)},e.send()}function getDataUri(t,c,i){void 0===i&&(i=c,c=!1);var o=new Image;o.onload=function(){var t=document.createElement("canvas");t.width=this.naturalWidth,t.height=this.naturalHeight;var o=t.getContext("2d");if(o.drawImage(this,0,0),c){var e=t.width/2,n=t.height/2,r=new Image;r.onload=function(){o.fillStyle="white",o.fillRect(e,n,e,n),o.drawImage(this,e,n,e,n),s()},r.src=c}else s();function s(){i(t.toDataURL("image/png"))}},o.src=t}function localJSON(t,o){if(void 0===o){var e=localStorage[t];return void 0!==e&&(e=$.parseJSON(e)),e}""===o?delete localStorage[t]:localStorage[t]=JSON.stringify(o)}function showView(t,o,e){void 0===e&&(e=170),0<e?($(t).fadeOut(e),$(o).delay(e).fadeIn(e)):($(t).hide(),$(o).show())}function _factory(t,o){return $(t+" "+o).clone()}function CrAPI(){console.log("%cCrAPI%c :: Init","font-weight: bold; color: green",""),this.DEFAULT_CALLBACK=function(t){return void 0!==t&&t},this.badgeColors={gray:"#9a9a9a",red:"#d00"},this.badgeOptions={title:!1,color:!1,text:!1},void 0===localStorage.crapi_locked&&(localStorage.crapi_locked="")}String.prototype.hashCode=function(){var t,o=0;if(0===this.length)return o;for(t=0,l=this.length;t<l;t++)o=(o<<5)-o+this.charCodeAt(t),o|=0;return o},String.prototype.deres=function(){return this.replace(/img[^>]*>/g,"")},String.prototype.decamel=function(){return this.replace(/(?=[a-zA-z])(?=[A-Z])/g,"-").toLowerCase()},String.prototype.matchAny=function(t){var e=this,n=!1;return $.each(t,function(t,o){if(e.match(o))return n=t,!1}),n},Array.prototype.unique=function(){return this.reduce(function(t,o){return t.indexOf(o)<0&&t.push(o),t},[])},Array.prototype.diff=function(e){return this.reduce(function(t,o){return-1==e.indexOf(o)&&t.push(o),t},[])},crapi=new CrAPI,CrAPI.prototype.manifest=function(){return chrome.runtime.getManifest()},CrAPI.prototype.reload=function(){location.reload()},localJSON("crapi_self")?CrAPI.prototype.self=localJSON("crapi_self"):chrome.runtime.sendMessage({action:"getSelf",async:!0},function(t){localJSON("crapi_self",t),CrAPI.prototype.self=t,global.debug="development"===t.installType}),CrAPI.prototype.lock=function(t){void 0===t&&(t=""),localStorage.crapi_locked=t},CrAPI.prototype.locked=function(){return localStorage.crapi_locked},CrAPI.prototype.storage=function(t){switch(t=void 0===t?"sync":t){case"local":return chrome.storage.local;case"sync":return chrome.storage.sync;default:return!1}},CrAPI.prototype.clone=function(t,o){void 0===t&&(t=null,o=this.DEFAULT_CALLBACK),void 0===o&&(o=t,t=null),this.storage().get(t,function(t){console.log("%cCrAPI%c :: Clone storage: %O","font-weight: bold; color: green","",t),o(t)})},CrAPI.prototype.update=function(t,o,e){void 0===e&&(e=this.DEFAULT_CALLBACK);var n=this;if(n.locked())console.error("%cCrAPI%c :: Storage locked: %o","font-weight: bold; color: green","",this.locked),e(!1);else{var r={};r[t]=o,n.lock("Update storage"),n.storage().set(r,function(){n.lock(),console.log("%cCrAPI%c :: Update storage: %O","font-weight: bold; color: green","",r),e(o)})}},CrAPI.prototype.updateAll=function(t,o){void 0===o&&(o=this.DEFAULT_CALLBACK);var e=this;e.locked()?(console.error("%cCrAPI%c :: Storage locked: %o","font-weight: bold; color: green","",this.locked),o(!1)):(e.lock("Update all"),e.storage().set(t,function(){e.lock(),console.log("%cCrAPI%c :: Update all: %O","font-weight: bold; color: green","",t),o(!0)}))},CrAPI.prototype.badge=function(t){var o=$.extend({},this.badgeOptions,t),e=void 0!==this.badgeColors[o.color]?this.badgeColors[o.color]:o.color;!1!==o.title&&chrome.browserAction.setTitle({title:o.title}),!1!==e&&chrome.browserAction.setBadgeBackgroundColor({color:e}),!1!==o.text&&chrome.browserAction.setBadgeText({text:o.text})},CrAPI.prototype.tests={},CrAPI.prototype.runTests=function(){console.group("== CrAPI Tests ==");try{var t=[];$.each(this.tests,function(){t.push(this)}),console.debug("queue: %o",t);var o=function(){console.debug("== End of Tests =="),console.groupEnd()};for(i=t.length-1;0<=i;i--)o=e(t[i],this,[o]);o()}catch(t){console.error(t),console.groupEnd()}function e(t,o,e){return function(){t.apply(o,e)}}},CrAPI.prototype.tests.storageTest1=function(o){console.groupCollapsed("Test Chrome storage functions");try{var e=this;console.log("storageTest this: %o",this);var n=["test1","test2"],r={test1:"root set",test2:{initial:"data"}},s={test2:{secondary:"data"}};console.debug("Clearing test storage..."),e.storage().remove(n,function(){e.storage().get(n,function(t){console.debug("Blank storage: %s",JSON.stringify(t)),console.debug("Setting testData1: %o",r),e.storage().set(r,function(){e.storage().get(n,function(t){console.debug("Result: %s",JSON.stringify(t)),console.debug("Setting testData2: %o",s),e.storage().set($.extend(!0,{},t,s),function(){e.storage().get(n,function(t){console.debug("Result: %s",JSON.stringify(t)),console.groupEnd(),o()})})})})})})}catch(t){console.error(t),console.groupEnd()}},CrAPI.prototype.tests.storageTest2=function(o){console.groupCollapsed("Test CrAPI storage functions");try{var e=this,n=["test1","test2"],r={test1:"root set",test2:{initial:"data"}},s={test2:{secondary:"data"}};console.debug("Clearing test storage..."),e.storage().remove(n,function(){e.clone(n,function(t){console.debug("Blank storage: %s",JSON.stringify(t)),console.debug("Setting testData1: %o",r),e.updateAll(r,function(){e.clone(n,function(t){console.debug("Result: %s",JSON.stringify(t)),console.debug("Setting testData2: %o",s),e.updateAll($.extend(!0,{},t,s),function(){e.clone(n,function(t){console.debug("Result: %s",JSON.stringify(t)),console.groupEnd(),o()})})})})})})}catch(t){console.error(t),console.groupEnd()}};
modapi=new ModAPI,modapi.manifest=crapi.manifest();var protocol="https://",domain="soundation.com",global={debug:!!crapi.self&&"development"===crapi.self.installType,path:{protocol:protocol,domain:domain,home:protocol+domain,cookie:protocol+domain,login:protocol+domain+"?login=yes",feed:protocol+domain+"/feed",api:protocol+"api."+domain+"/me",songs:protocol+"api."+domain+"/songs",profile:protocol+domain+"/account/profile",messages:protocol+domain+"/account/messages"},cookie:"_soundation_session",storageModel:{options:{},watchlist:[],version:""},optionDefaults:{rememberMe:!1,showAlertsOnTop:!1,watchlist:!1,userTags:!0,userTagLinks:!1,moveCommentBox:!0,groupFilters:!0,moveGroupInvites:!0},regex:{messageLink:/\/account\/messages\/\d+$/,groupLink:/\/group\//,trackLink:/\/user\/.*\/track\//},watchlistModel:{track:{link:"",likes:0,downloads:0,comments:0},group:{link:"",lastComment:"",members:0,followers:0,tracks:0}}};function ModAPI(){console.log("%cModAPI%c :: Init","font-weight: bold; color: #f60",""),this.DEFAULT_CALLBACK=function(){}}ModAPI.prototype.login=function(a){void 0===a&&(a=this.DEFAULT_CALLBACK),console.log("%cModAPI%c :: Login","font-weight: bold; color: #f60",""),$.get(global.path.home,function(o){var e,t=o.deres(),n=$(t),i=n.find(".user-link").attr("href"),s=n.filter("[name=csrf-token]").attr("content");e=function(o){o.link=i,global.token=s,a(o)},$.getJSON(global.path.api).fail(function(){console.error("%cModAPI%c :: Unable to connect to Soundation API","font-weight: bold; color: #f60","")}).success(function(o){var t=o.data||o;t.success=o.success,e(t)})})},ModAPI.prototype.token=function(){return global.token};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
