var alarmRunning=!1,msgFunctions={},cacheKeys=["notifData","blobs","options"];function initSongs(){var a=new JSZip;$.getJSON(global.path.songs,function(t){var o=t.data,e=0,i=o.length;console.log("found %o songs",o.length),$.each(o,function(t,n){console.log("processing %o...",n.title),console.log("song meta: %o",n),$.getJSON(global.path.songs+"/"+n.id,function(t){e++;var o=atob(t.data.data);a.file(n.title+".sng",o),e==i&&a.generateAsync({type:"blob"}).then(function(t){saveAs(t,"songs.zip")})})})})}$(function(){function g(t){return t.matchAny({group:global.regex.groupLink,track:global.regex.trackLink})}function m(t,o,n){n=n||g(t);var e=global.watchlistModel[n];e.link=t;var i=$(o);if("track"==n){var a=parseInt(i.find(".stats .likes").text()),c=parseInt(i.find(".stats .downloads").text()),s=parseInt(i.find(".stats .comments").text());$.extend(e,{likes:a,downloads:c,comments:s})}else if("group"==n){var l=(i.find(".comments .comment:first .content > p").html()||"").hashCode(),r=parseInt(i.find(".stats a[href*=members] b").text()),f=parseInt(i.find(".stats a[href*=followers] b").text()),m=parseInt(i.find(".stats a[href*=tracks] b").text());$.extend(e,{lastComment:l,members:r,followers:f,tracks:m})}return{updates:e,type:n}}function t(i){var a=chrome.extension.getViews({type:"popup"}),c=localJSON("options")||{};modapi.login(function(o){if("feed"==i.name)try{if(o.success)alarmRunning?console.info("Alarm running, notification handler cancelled"):a.length?console.info("Popup open, notification handler cancelled"):(x("modation_login",""),alarmRunning=!0,console.log("Modation :: Check notifications"),$.get(global.path.feed,function(t){var k=$(t.deres()).find("aside").find(".notifications .notification"),v=[],w=[];k.find("a").attr("href",function(t,o){return global.path.home+o});var y=0;k.each(function(t,o){var n=$(o),e=n.find(".actions").children(),i=n.clone();i.find("time, .clear, .actions").remove();var a=i.find("a");i.find(".author").remove();var c="modation"+n.find(".clear").attr("href").match(/(?:\/)(\d+)/)[1],s=n.find("time").text(),l=n.find(".author"),r=l.text(),f=l.attr("href"),m=i.text().trim(),d=a.last().attr("href"),u=n.find(".clear").attr("href"),g=[];if(e.each(function(){g.push({title:$(this).text(),link:$(this).attr("href"),data:$(this).data()})}),d.match(global.regex.messageLink)){if(-1!=$.inArray(d,v))return;v.push(d)}w.push(c);var h=d.match(global.regex.groupLink),p=localJSON("blobs")||{};function b(t){var o={type:"basic",iconUrl:t,title:r,message:m,contextMessage:s,buttons:g.map(function(t){return{title:t.title}})};function n(){x(c,{notif:o,link:d,clear:u,actions:g}),++y==k.length&&S()}x(c)?n():chrome.notifications.create(c,o,function(){n()})}p[h?d:f]?b(p[h?d:f]):$.get(h?d:f,function(t){var o=$(t).find((h?".top .inner .container":"aside")+" img").attr("src");getDataUri("img/newiconflat128.png",o,function(t){var o=localJSON("blobs")||{};o[h?d:f]=t,localJSON("blobs",o),b(t)})})});var o=Object.keys(x()).filter(function(t){return t.match(/modation(\d)+/)});$.each(o.diff(w),function(t,o){chrome.notifications.clear(o),x(o,"")}),0===y&&S(),alarmRunning=!1}));else{console.warn("Could not login to Soundation"),crapi.badge({title:"Please login to view notifications",color:"gray",text:"?"});var t=[{title:"Login with Facebook",link:global.path.home+"/users/auth/facebook",data:{}},{title:"Login with Google",link:global.path.home+"/users/auth/google_oauth2",data:{}}],n={type:"basic",iconUrl:"img/newiconflat128.png",title:"Login to Soundation",message:"Click here to login, or use one of the buttons below.",buttons:t.map(function(t){return{title:t.title}})},e="modation_login";x(e)||chrome.notifications.create(e,n,function(){x(e,{notif:n,link:global.path.login,actions:t})}),alarmRunning=!1}}catch(t){console.error("Unknown error occurred: %o",t),alarmRunning=!1}else"watchlist"==i.name&&c.watchlist&&crapi.clone(["watchlist"],function(t){if(o.success){var d="undefined"==typeof testWatchlist?t.watchlist:testWatchlist,r=[],u=[],f=0;$.each(d,function(c,s){r[c]=s,u[c]={};var l=g(s.link);u[c].type=l,$.get(s.link,function(t){var o=$(t),n=m(s.link,o,l).updates;if("track"==l)u[c].title=o.find(".title").text().trim(),global.debug&&console.log("track %o: current %o, new %o",s.link,{likes:s.likes,downloads:s.downloads,comments:s.comments},n);else if("group"==l){var e=o.find(".comments .comment:first"),i=e.find(".comment-author"),a=e.find(".content > p");u[c].title=o.find(".group-hero-container-info > h2").text(),u[c].commentBody=a.text(),u[c].commentAuthor=i.text(),u[c].commentAuthorLink=i.find("a").attr("href"),global.debug&&console.log("group %o: current %o, new %o",s.link,{lastComment:s.lastComment,members:s.members,followers:s.followers,tracks:s.tracks},n)}r[c]=$.extend({},r[c],n)}).always(function(){if(++f==d.length){var m=[];$.each(r,function(t,o){var n=d[t],e=u[t];if(m[t]=[],"track"==e.type){var i=o.likes-n.likes,a=o.downloads-n.downloads,c=o.comments-n.comments;i&&m[t].push(i+" like"+(1==Math.abs(i)?"":"s")),a&&m[t].push(a+" download"+(1==Math.abs(a)?"":"s")),c&&m[t].push(c+" comment"+(1==Math.abs(c)?"":"s")),global.debug&&console.log("changes for track %o: %o",o.link,m[t])}else if("group"==e.type){var s=o.followers-n.followers,l=o.lastComment!==n.lastComment&&e.commentBody,r=o.members-n.members,f=o.tracks-n.tracks;l&&m[t].push("New comment from @"+e.commentAuthor),s&&m[t].push(s+" follower"+(1==Math.abs(s)?"":"s")),r&&m[t].push(r+" member"+(1==Math.abs(r)?"":"s")),f&&m[t].push(f+" track"+(1==Math.abs(f)?"":"s")),global.debug&&console.log("changes for group %o: %o",o.link,m[t])}}),f=0,$.each(m,function(t,o){var n=d[t],e="modationwatch"+n.link.hashCode(),i={type:"basic",iconUrl:"img/newiconflat128.png",title:u[t].title,message:o.join(", ")};function a(){++f,x(e,{notif:i,link:n.link}),f==m.length&&(crapi.updateAll({watchlist:r}),S())}o.length?x(e)?a():chrome.notifications.create(e,i,function(){a()}):++f})}})})}else console.info("Not logged in, skipping watchlist")})})}function x(t,o){var n=localStorage.notifData,e=n?$.parseJSON(n):{};if(void 0===t)return e;void 0===o&&(o=!1);var i=e[t];return""===o?delete e[t]:o&&(e[t]=o),localStorage.notifData=JSON.stringify(e),i}function S(){var t=Object.keys(x()).length,o=0===t?"No new notifications :(":t+" new notification"+(1<t?"s":"");crapi.badge({title:o,color:"red",text:t?String(t):""})}function o(){$.each(cacheKeys,function(t,o){delete localStorage[o]}),console.info("Cache cleared")}chrome.runtime.onInstalled.addListener(function(t){var a;o(),a=t,crapi.clone($.extend(!0,{},global.storageModel,{options:global.optionDefaults}),function(e){var i=crapi.manifest().version;function t(){var t=moment().format();localStorage.installed=t,localStorage.version=i,localJSON("options",e.options);var o={type:"basic",iconUrl:"img/newiconflat128.png",title:"Modation has updated!",message:"Click here to see what's new.",contextMessage:("update"==a.reason?"v"+a.previousVersion+" => ":"")+"v"+i},n="modation_update";chrome.notifications.create(n,o,function(){x(n,{notif:o,link:"http://djmarcolesco.me/modation/",actions:[]})})}e.version||(crapi.storage("local").clear(),crapi.storage("sync").clear(),console.info("No storage version, clearing storage")),e.version!==i||"update"==a.reason?crapi.updateAll($.extend(!0,{},global.storageModel,e,{version:i}),function(){console.info("Updated storage model"),t()}):t()})}),chrome.runtime.onStartup.addListener(function(){o(),crapi.clone({options:global.optionDefaults},function(t){console.log("cache options"),localJSON("options",t.options)}),S()}),chrome.runtime.onMessage.addListener(function(t,o,n){if(msgFunctions[t.action]&&msgFunctions[t.action](t,o,n),!0===t.async)return!0}),msgFunctions.confirm=function(t,o,n){n(confirm(t.msg))},msgFunctions.rememberMe=void(chrome.cookies&&chrome.cookies.onChanged.addListener(function(t){"explicit"!=t.cause&&localJSON("options").rememberMe&&chrome.cookies.get({url:global.path.cookie,name:global.cookie},function(t){(t=t||{}).session&&chrome.cookies.set({url:global.path.cookie,name:global.cookie,value:t.value,domain:t.domain,path:t.path,secure:t.secure,httpOnly:t.httpOnly,expirationDate:moment().add(1,"w").unix()},function(){})})})),msgFunctions.getSelf=function(t,o,n){chrome.management.getSelf(function(t){n(t)})},chrome.alarms.create("feed",{delayInMinutes:modapi.manifest.debug?0:1,periodInMinutes:1}),chrome.alarms.create("watchlist",{delayInMinutes:modapi.manifest.debug?0:1,periodInMinutes:10}),chrome.alarms.onAlarm.addListener(t),handle($("body"),"alarm.initAlarms",function(){t({name:"feed"}),t({name:"watchlist"})}),function(){function i(o,t,n){if(void 0!==n){var e=x(t).actions[n];e.data.method?$.post(e.link,{_method:e.data.method,authenticity_token:modapi.token()}):o=e.link}chrome.windows.getCurrent(function(t){chrome.tabs.create({windowId:t.id,url:o}),chrome.windows.update(t.id,{focused:!0})}),a(t)}function a(t){chrome.notifications.clear(t),x(t).clear&&$.post(x(t).clear,{_method:"delete",authenticity_token:modapi.token()}),x(t,""),S()}chrome.notifications.onClicked.addListener(function(t){var o=x(t);o&&i(o.link,t)}),chrome.notifications.onButtonClicked.addListener(function(t,o){var n=x(t);if(n){var e=n.actions[o];e.data.confirm?confirm(e.data.confirm)&&i(n.link,t,o):i(n.link,t,o)}}),chrome.notifications.onClosed.addListener(function(t,o){o&&a(t)}),msgFunctions.showAllNotifications=function(){var t;t=x(),$.each(t,function(t,o){chrome.notifications.create(t,o.notif,function(){})}),t.modation_login||S()}}(),msgFunctions.watchlistItemType=function(t,o,n){n(g(t.link))},msgFunctions.parseWatchlistItem=function(t,o,n){n(m(t.link,t.html,t.type))}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
